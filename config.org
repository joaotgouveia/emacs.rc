#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Base setup
** Hooks

#+begin_src emacs-lisp
(require 'hooks)
#+end_src

** Packages

#+begin_src emacs-lisp
;; initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; load use-package
(unless (package-installed-p 'use-package)
;; install it if it isn't already installed
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src


* Appearence
** Base UI

#+begin_src emacs-lisp
;; minimalistic ui
(setq-default inhibit-startup-message t            ; disable startup screen
              ring-bell-function 'ignore           ; disable sounds
              make-backup-files nil                ; disable backup files
              tab-width 4
              indent-tabs-mode nil                 ; use spaces instead of tabs
              display-line-numbers-type 'relative) ; use relative line numbers
(scroll-bar-mode -1)   ; disable visible scrollbar
(tool-bar-mode -1)     ; disable the toolbar
(tooltip-mode -1)      ; disable tooltips
(menu-bar-mode -1)     ; disable the menu bar
(set-fringe-mode 15)   ; add some horizontal padding

;; line and column numbers
(column-number-mode)                 ; enable column numbers
(global-display-line-numbers-mode t) ; enable line numbers globally
(dolist (mode '(term-mode-hook       ; disable line numbers on some modes
                shell-mode-hook
                eshell-mode-hook
                neotree-mode-hook
                ement-room-mode-hook
                pdf-view-mode-hook
                compilation-mode-hook
                org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font

#+begin_src emacs-lisp
(defun jg/set-font-faces ()
  (set-face-attribute 'default nil :font "JetBrainsMonoNerdFont" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMonoNerdFont" :height 160)
  (set-face-attribute 'variable-pitch nil :font "SourceSans3" :height 180))

(jg/set-font-faces)
#+end_src

** Auto pairing

NOTE: remove for org mode (?)

#+begin_src emacs-lisp
(electric-pair-mode t)
#+end_src

** nerd-icons

#+begin_src emacs-lisp
(use-package nerd-icons)

(add-to-list 'nerd-icons-extension-icon-alist '("astro" nerd-icons-sucicon "nf-custom-astro" :face nerd-icons-orange))
(add-to-list 'nerd-icons-extension-icon-alist '("mjs" nerd-icons-devicon "nf-dev-javascript" :face nerd-icons-yellow))
(add-to-list 'nerd-icons-extension-icon-alist '("l" nerd-icons-mdicon "nf-md-arm_flex" :face nerd-icons-yellow))
(add-to-list 'nerd-icons-extension-icon-alist '("y" nerd-icons-mdicon "nf-md-alpha_y_box" :face nerd-icons-blue))
(add-to-list 'nerd-icons-extension-icon-alist '("qml" nerd-icons-mdicon "nf-md-alpha_q" :face nerd-icons-green))
#+end_src

** nerd-icons-dired

#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

** page-break-lines

Displays ugly form feed characters as tidy horizontal rules

#+begin_src emacs-lisp
(use-package page-break-lines
  :demand t)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; global settings (defaults)
  (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
    doom-themes-enable-italic t)  ; if nil, italics is universally disabled
  (load-theme 'doom-moonlight t)

  ;; corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode t)
  :custom ((doom-modeline-height 15)))
#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp
;; match parenthesis
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  ;; prog-mode is the base mode for any programming language mode
#+end_src

** solaire-mode

Visually distinguish real buffers from pop-ups, sidebars, etc

#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode t))
#+end_src


* General
** auto-package-update

Automatically update packages

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe))
#+end_src

** counsel

#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
    ("C-x b" . counsel-ibuffer)
    ("C-x C-f" . counsel-find-file)
    :map minibuffer-local-map
    ("C-r" . 'counsel-minibuffer-history))
  :config
  ;; don't start searches with ^
  ;;(setq ivy-initial-inputs-alist nil)
  )
#+end_src

** ivy

#+begin_src emacs-lisp
(use-package swiper) ;; swiper sometimes doesn't come included in ivy
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
    :map ivy-minibuffer-map
    ("TAB" . ivy-alt-done)
    ("C-l" . ivy-alt-done)
    ("C-j" . ivy-next-line)
    ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
    ("C-k" . ivy-previous-line)
    ("C-l" . ivy-done)
    ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
    ("C-k" . ivy-previous-line)
    ("C-d" . ivy-reverse-i-search-kill))
  :config (ivy-mode t))      ;; config happens after the mode is loaded
#+end_src

** ivy-rich

Adds extra info when listing commands with Ivy

#+begin_src emacs-lisp
(use-package ivy-rich
    :init (ivy-rich-mode t))
#+end_src

** which-key

Pops up a panel when using a bind, explaining what you can do with it

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode) ; init happens before the package is loaded
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))
#+end_src

** heplful

Better help functions

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . counsel-describe-variable))
#+end_src

** general

Define keybinds in a more concise way

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  ;; making C-SPC the new leader key
  (general-create-definer jg/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (jg/leader-keys
    "t" '(:ignore t :which-key "toggles")))
#+end_src

** undo-fu

Better undo and redo

#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

** hydra

Temporary bindings for repetitive actions

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** evil

Vim keybindings

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode t)
  ;; use C-g instead of ESC to go back to normal mode
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; when a line wraps
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

** evil-collection

Evil keybindings for different emacs modes

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil ;; load this package after evil is loaded
  :config
  (evil-collection-init))
#+end_src

** multiple-cursors

NOTE: Not used atm

#+begin_src emacs-lisp
;(use-package multiple-cursors)
#+end_src

** dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :after page-break-lines
  :init
  (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  :custom
  (dashboard-startup-banner "~/dev/emacs.rc/resources/logo.txt")
  (dashboard-icon-type 'nerd-icons)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-display-icons-p t)
  (dashboard-navigation-cycle t)
  (dashboard-show-shortcuts nil)
  (dashboard-vertically-center-content t)
  (dashboard-page-separator "\n\f\n")

  (dashboard-items '((recents   . 5)
                     (projects  . 5)))

  (dashboard-footer-messages '("It's been emotional"
                               "Leave the gun, take the cannoli"
                               "You never meet anybody that thinks they're a bad person"
                               "Vincent, we happy?"
                               "If you win you win, if you lose you still win"
                               "Who put this thing together? Me, that's who"
                               "But if I leave, the fans still gon' love me man?"
                               "As greedy as a pig"))

  (dashboard-startupify-list '(dashboard-insert-banner
                               dashboard-insert-items
                               dashboard-insert-newline
                               dashboard-insert-footer))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** pdf-tools

View pdfs inside emacs

#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width)
  (define-key pdf-view-mode-map (kbd "/") 'isearch-forward))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(defhydra hydra-zoom nil
  "zoom"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(jg/leader-keys "tz" '(hydra-zoom/body :which-key "zoom"))

(evil-define-key '(normal visual) 'global
  "L" 'evil-end-of-line
  "H" 'evil-beginning-of-line)

(evil-define-key '(normal insert) 'global
  (kbd "C-x h") 'previous-buffer
  (kbd "C-x l") 'next-buffer)

;;(defun jg/visual-insert ()
;; (interactive)
;; (mc/edit-lines))

;;(evil-define-key 'visual 'global
;;  (kbd "a") 'jg/visual-insert)

(evil-define-key 'normal prog-mode-map
  (kbd "C-.") 'lsp-find-definition
  (kbd "C-?") 'lsp-find-references)
#+end_src


* Dev
** Whitespace handling

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'jg/whitespaces-hook)
#+end_src

** Tree-sitter

#+begin_src emacs-lisp
(setq major-mode-remap-alist
 '((javascript-mode . js-ts-mode)
   (c-mode . c-ts-mode)))
#+end_src

** evil-nerd-commenter

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("C-," . evilnc-comment-or-uncomment-lines))
#+end_src

** projectile

Managing projects

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-project-search-path '(("~/dev" . 1))))
#+end_src

** counsel-projectile

Improve projectile and ivy integration

#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** magit

Git integration

#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function
  #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** forge

GitHub integration (open prs, see issues, etc.)

#+begin_src emacs-lisp
(use-package forge)
#+end_src

** flycheck

On-the-fly syntax checking

#+begin_src emacs-lisp
(use-package flycheck
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

** lsp-mode

LSP support

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook ((python-mode . lsp-deferred)
         (js-ts-mode . lsp-deferred)
         (c-ts-mode . lsp-deferred)
         (c++-mode . lsp-deferred)
         (rust-mode . lsp-deferred)
         (astro-mode . lsp-deferred)
         (typescript-mode . lsp-deferred)
         (tsx-mode . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :custom
  (lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))
#+end_src

** lsp-ui

Higher level UI modules (flycheck support, code lenses, etc.)

#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src

** company-mode

Better completions

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :config
  (setq company-format-margin-function 'company-text-icons-margin))
#+end_src

** fancy-compilation

Improvements to the basic compilation mode

#+begin_src emacs-lisp
(use-package fancy-compilation
  :commands (fancy-compilation-mode))

(with-eval-after-load 'compile
  (fancy-compilation-mode))
#+end_src

** lsp-tailwindcss

#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :after lsp-mode)
#+end_src

** web-mode

#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

** astro-mode

#+begin_src emacs-lisp
(define-derived-mode astro-mode web-mode "astro")
(add-to-list 'auto-mode-alist '(".*\\.astro\\'" . astro-mode))
#+end_src

** typescript-mode

#+begin_src emacs-lisp
(use-package typescript-mode
  :config
  (define-derived-mode tsx-mode typescript-mode "tsx")
  (add-to-list 'auto-mode-alist '(".*\\.tsx\\'" . tsx-mode)))
#+end_src

** mjs-mode

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '(".*\\.mjs\\'" . javascript-mode))
#+end_src

** flex-mode

#+begin_src emacs-lisp
(define-derived-mode flex-mode c++-mode "flex")
(add-to-list 'auto-mode-alist '(".*\\.l\\'" . flex-mode))
#+end_src

** yacc-mode

#+begin_src emacs-lisp
(define-derived-mode yacc-mode c++-mode "yacc")
(add-to-list 'auto-mode-alist '(".*\\.y\\'" . yacc-mode))
#+end_src

** qml-mode

#+begin_src emacs-lisp
(require 'qml-mode)
(add-to-list 'auto-mode-alist '(".*\\.qml\\'" . qml-mode))
#+end_src

** hl-line-mode

Highlight current line

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (hl-line-mode 1)))
#+end_src

* Org mode

#+begin_src emacs-lisp
;; org mode appearance settings (strongly inspired by SystemCrafter's config)
(defun jg/org-appearance-setup ()
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.0)
                   (org-level-4 . 1.1)
                   (org-level-5 . 1.1)
                   (org-level-6 . 1.1)
                   (org-level-7 . 1.1)))
   (set-face-attribute (car face) nil :font "SourceSans3" :weight 'regular :height (cdr face)))

   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
   (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  :config
  (setq org-ellipsis ""
        org-hide-emphasis-markers t)
  (jg/org-appearance-setup))


(add-hook 'org-mode-hook 'jg/org-hook)
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jg/org-tangle-hook)))
#+end_src

** Whitespace handling

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'jg/whitespaces-hook)
#+end_src

** Babel

Code block functionality

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
  '((emacs-lisp . t)))
(setq org-confirm-babel-evaluate nil)
#+end_src

** Templates

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** org-modern

Improve how org mode looks

#+begin_src emacs-lisp
(use-package org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :config
  (set-face-attribute 'org-modern-symbol nil :family "SymbolsNerdFontMono"))
#+end_src

** visual-fill-mode

Center text on screen

#+begin_src emacs-lisp
    (use-package visual-fill-column
      :defer t
      :hook (org-mode . jg/org-visual-fill-hook))
#+end_src

** org-sidebar

Sidebar for org files

#+begin_src emacs-lisp
(use-package org-sidebar)

(evil-define-key '(normal insert) 'org-mode-map
  (kbd "C-x f") 'org-sidebar-tree-toggle)
#+end_src

** org-present

Slides in org-mode

#+begin_src emacs-lisp
(use-package org-present)
(add-hook 'org-present-mode-hook 'jg/org-present-hook)
#+end_src


* Note taking

A lot of inspiration for this setup came from:
- [[https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/][Writing academic papers with org mode]]
- [[https://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/][My org-roam workflows for taking notes and writing articles]]
- [[https://kristofferbalintona.me/posts/202206141852/][Citations in org-mode: Org-cite and Citar]]
- [[https://emacsconf.org/2021/talks/research/][EmacsConf 2021: Managing a research workflow (bibliographies, note-taking, and arXiv)]]

** org-cite

Insert citations

#+begin_src emacs-lisp
(evil-define-key '(normal insert) org-mode-map
  (kbd "C-c ]") 'org-cite-insert)

(setq org-cite-csl-styles-dir (expand-file-name "~/docs/bibliography/zotero/styles/"))
(setq org-cite-export-processors '((t . (csl "ieee.csl"))))
#+end_src

** citar

Improvements to the basic org-cite frontend

#+begin_src emacs-lisp
(use-package citar
  :custom
  (org-cite-global-bibliography '("~/docs/bibliography/library.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography))

(setq citar-templates
  '((main . "${author editor:30%sn}    ${date year issued:4}    ${title:48}")
    (suffix . "    ${=type=:12}")
    (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
    (note . "Notes on ${author editor:%etal}, ${title}")))

(defvar citar-indicator-files-icons
  (citar-indicator-create
   :symbol (nerd-icons-faicon
            "nf-fa-file_o"
            :face 'nerd-icons-green
            :v-adjust -0.1)
   :function #'citar-has-files
   :padding "  " ; need this because the default padding is too low for these icons
   :tag "has:files"))

(defvar citar-indicator-notes-icons
  (citar-indicator-create
   :symbol (nerd-icons-codicon
            "nf-cod-note"
            :face 'nerd-icons-blue
            :v-adjust -0.3)
   :function #'citar-has-notes
   :padding "    "
   :tag "has:notes"))

(setq citar-indicators (list citar-indicator-files-icons citar-indicator-notes-icons))
#+end_src

** citeproc

Rendering citations and bibliographies in styles described in CSL

#+begin_src emacs-lisp
(use-package citeproc)
;; The IEEE style causes an error when trying to export an empty bibliography.
(defun dh/org-cite-export-bibliography-advice (fn keyword _ info)
  (if (org-cite-list-keys info)
      (funcall fn keyword nil info)))

(advice-add #'org-cite-export-bibliography :around #'dh/org-cite-export-bibliography-advice)
#+end_src

** org-roam

Used for blog posts and literature and permanent notes

#+begin_src emacs-lisp
  (use-package org-roam
    :demand t
    :custom
    (org-roam-directory "~/wiki/slipbox")
    (org-roam-capture-templates
     '(("p" "permanent note" plain
      "* ${title}\n\n%?\n\n"
      :if-new
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
      "#+title: ${title}\n#+date: %U\n\n")
      :unnarrowed t)
       ("l" "literature note" plain
      "\n* %?\n\n"
      :if-new
      (file+head "%(expand-file-name citar-org-roam-subdir org-roam-directory)/${citar-citekey}.org"
      "#+title: ${note-title}\n#+date: %U\n")
      :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

** citar-org-roam

Tighter citar and org-roam integration

#+begin_src emacs-lisp
(use-package citar-org-roam
  :after (citar org-roam)
  :config (citar-org-roam-mode))
(setq citar-org-roam-capture-template-key "l")
(setq citar-org-roam-subdir "literature")
#+end_src

** org-capture

Used for project and fleeting notes

#+begin_src emacs-lisp
(setq org-capture-templates
  '(("f" "fleeting note" entry (file "~/wiki/fleeting.org")
     "** TODO %^{note title}\nRegistered on:%U\n%?" :empty-lines-before 1)
    ("p" "project note" entry (file "~/wiki/project-notes.org")
     "* %^{project name}\n\n** TODO %?\n")
    ("b" "blog post" plain (file "~/wiki/blog/post.org")
     "#+title: %^{title}\n#+author: João Gouveia\n#+pubDate:\n\n%?\n\n** References\n\n#+print_bibliography:"
     :unnarrowed t)))
#+end_src


* Socials

** ement

Matrix client

#+begin_src emacs-lisp
(use-package ement
  :config
  (setq ement-room-left-margin-width 0
        ement-room-right-margin-width 0
        ement-room-sender-headers t
        ement-room-sender-in-headers t
        ement-room-sender-in-left-margin nil
        ement-room-prism 'both))
#+end_src
